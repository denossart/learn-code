
==SELECTORS

--Type selectors
--Universal selector (*)
--Attribute selectors
----General
------[attribute-name]
------type[attribute*=value]
----Class selectors (.class-name)
------Pseudo-class (:pseudo-class-name): state
----ID selectors (#id-name)



==RULESET
Selector + declaration block



==DECLARATION BLOCK
Between {}



==DECLARATION
Aka the Property-Value pair

--Property
Determines the style to apply
--:
--Value
--;



==REFERENCING CSS

--External style sheet
Referenced via <link> from within <head> of HTML document

CSS ruleset in external stylesheet

--Internal styles
HTML <style> element in <head>

--Inline styles
HTML style="...:..." attribute



==CSS RESETS
Because the default style differs from browser to browser

--Eric Meyer's reset
--Nicolas Gallagher's reset
--Lots of others

--Basic Reset: margin / padding / border-box



==CSS CASCADE
For two identical styles in a style sheet that differ only in property value, the latter style takes precedence over the former

So, usually styles cascade from top to bottom

Except when the specificity of the ruleset breaks the cascade



==SPECIFICITY: I.C.T

--ID     1.0.0
--CLASS  0.1.0
--TYPE   0.0.1



==COMBINED SELECTOR
Should be read from right to left

--KEY SELECTOR: the selector before { identifies the element the styles will be applied to 
--PREQUALIFIER: the selector to the left of the key selector

--CHAINING SELECTORS

--DESCENDANT COMBINATOR



==OPACITY (0 -> 1)
Degree to which content behind an element is hidden

--0: completely hidden
--1: completely visible
--Overlay: semi-transparent element placed over another element

Opposite of transparency



==TRANSPARENCY

...



==BOX MODEL: C.P.B.M.
Content - Padding - Border - Margin

By default the box model is additive ("content-box")

User agent (aka browser) default stylesheets

--WIDTH AND HEIGHT
You can set a range = minimum/maximum width or height

Mostly used on <img>, not so much on text

--DIMENSIONS

--BORDERS
Width - style - color
(medium - none - color of parent)

If not set, the default applies

--PADDINGS

Paddings are transparent

--MARGINS
Horizontal margins add up: 20px + 30px = 50px

Vertical margins don't: 20px + 30px = 30px

Margins are transparent

No margin possible on inline-level elements

--OVERFLOW
When the parent (aka containing element aka container) isn't large enough for its content

The "overflow" property deals with this:
"hidden" - "visible" - "scroll"

--CHANGING THE BOX MODEL
Because of difficulty of calculating the size

----Content-Box
Default ("box-sizing: content-box")

----Border-Box
"box-sizing: border-box"



==VISIBILITY
"hidden" - "visible" - "collapse"

Difference "display: none" and "visibility: hidden"



==COLORS

--NAME               "color: black"
--HEXADECIMAL VALUE  "color: #000000"
--RGB VALUE          "color: rgb(0, 0, 0)"
--HSL VALUE          "color: hsl(0, 0%, 0%)"



==LENGTHS

--ABSOLUTE     px (1/96th of an inch)
--RELATIVE     %, em, rem



==DISPLAY PROPERTY VALUES
"none" - "block" - "inline" - "inline-block"

--INLINE
Doesn't accept a width or height

--INLINE-BLOCK
Better option than floats to create layouts

These elements sit on one line and accept all "block-level" properties



==WIDTH AND HEIGHT
Only relevant to non-inline elements



==FLOATS
Used to remove an element from the normal flow of a page, and position it to the left/right of its parent element

Applying a float only yields a visible result if it has a width

The width of a floated element defaults to the width of the content

A floated element's display value changes to "block" - it then accepts width and height

Used to create layouts

--CLEARING FLOATS

--CONTAINING FLOATS
Aka: "clearfix"

Better option



==PRECISE POSITIONING

--POSITION (HOW)
"static" (default) - "relative" - "absolute" - "fixed" - "sticky"

----"static": normal flow - no box offset
----"relative": normal flow - move in relation to itself
----"absolute": not within normal flow - move in relation to parent (or body element)
----"fixed": ...
----"sticky": ...

--BOX OFFSET (WHERE)
"top" - "right" - "bottom" - "left"

--Z-INDEX
Does not work on "static" positioning

Default = 0


==FLEX

...



==GRID

...



==RESPONSIVE DESIGN

--IN HTML: DEFINE VIEWPORT
<meta name="viewport" content="width=device-width, initial-scale=1">

--IN CSS: DEFINE MEDIA QUERY

----First breakpoint: use max-width
@media (max-width: 413px) {...}
----All following breakpoints: use min-width
@media (min-width: 414px) {...}
----Breakpoints: 414px/654px/916px/...

----Common breakpoints: 480/768/1024/1280px

----Common breakpoints:
------Small: < 640px
------Medium: 641px - 1007px
------Large: 1008px >



==TIPS&TRICKS

--CSS CIRCLE
> width and height set to the same value
> border-radius: 50%


--CSS BASIC PAGE RESET
Set margin and height to 0


--CSS NEW BOX MODEL
Set to "border-box"


--CSS CENTER CONTENT
"margin: 0 auto;"

Works only if the parent has a width

--CSS DEBUGGING
"outline: 1px solid red;"

Benefit: "outline" doesn't take up any space

--CSS POLKA DOTS BACKGROUND
> https://dev.to/clairecodes/how-to-create-a-polka-dot-background-with-css-23m0

--UPPERCASE TEXT
"text-transform: uppercase;"

==ROTATING AN IMAGE
"img {transform: rotate(180deg);}


==SOURCES

Free
> learn.shayhowe.com/html-css

Paid
> Codecademy Full-Stack Engineer
